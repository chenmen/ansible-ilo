---
# file: roles/ilo/tasks/firmware.yml
- name: Checking if an ISO is already mounted (virtual media)
  uri:
    url: "https://{{ item }}/rest/v1/managers/1/virtualmedia/2"
    method: GET
    user: "{{ ilo_user }}"
    password: "{{ ilo_password }}"
    force_basic_auth: true
    validate_certs: false
  with_items: "{{ ilo_addr.results | map(attribute='ansible_facts.ipmi') | list }}"
  register: virtualmedia

- set_fact:
    virtualmedia_mounted: "{{ item.json.Inserted }}"
  with_items: "{{ virtualmedia.results }}"
  no_log: true

- name: Umounting ISO via REST API (virtual media)
  uri:
    url: "https://{{ item }}/rest/v1/managers/1/virtualmedia/2"
    method: POST
    user: "{{ ilo_user }}"
    password: "{{ ilo_password }}"
    force_basic_auth: true
    validate_certs: false
    body: '{"Action": "EjectVirtualMedia", "Target": "/Oem/Hp"}'
    body_format: json
  with_items: "{{ ilo_addr.results | map(attribute='ansible_facts.ipmi') | list }}"
  when: (ilo_firmware >= '250') and
        virtualmedia_mounted == true

- name: Umounting ISO via SSH (virtual media)
  command:
    sshpass -p {{ ilo_password }} ssh {{ ilo_ssh_opts }} {{ item }} -l {{ ilo_user }} "vm cdrom eject"
  with_items: "{{ ilo_addr.results | map(attribute='ansible_facts.ipmi') | list }}"
  when: (ilo_firmware < '250') and
        virtualmedia_mounted == true

- name: Mounting firmware ISO (virtual media)
  uri:
    url: "https://{{ item }}/rest/v1/managers/1/virtualmedia/2"
    method: PATCH
    user: "{{ ilo_user }}"
    password: "{{ ilo_password }}"
    force_basic_auth: true
    validate_certs: false
    body: '{"Image": "{{ ilo_firmware_iso }}"}'
    body_format: json
  with_items: "{{ ilo_addr.results | map(attribute='ansible_facts.ipmi') | list }}"

- name: Making sure next boot will be on mounted ISO
  uri:
    url: "https://{{ item }}/rest/v1/managers/1/virtualmedia/2"
    method: PATCH
    user: "{{ ilo_user }}"
    password: "{{ ilo_password }}"
    force_basic_auth: true
    validate_certs: false
    body: '{"Oem": {"Hp": {"BootOnNextServerReset": true}}}'
    body_format: json
  with_items: "{{ ilo_addr.results | map(attribute='ansible_facts.ipmi') | list }}"
